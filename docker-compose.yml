version: "3.8"

services:
  namenode:
    image: jayachander/hadoop-namenode:1.0.0-hadoop3.3.2-java8
    hostname: namenode 
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME:-hadoop-cluster}
    env_file:
      - ./hadoop.env 
      - ./.env      
    ports:
      - "9870:9870" 
      - "9000:9000" 
    networks:
      - hadoop-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 8G 
      # placement:
      #   constraints: [node.labels.studio == manager]


  datanode1: &datanode-template
    image: jayachander/hadoop-datanode:1.0.0-hadoop3.3.2-java8
    hostname: datanode1
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME:-hadoop-cluster}
      - SERVICE_PRECONDITION=${DATANODE_PRECONDITION:-namenode:9870}
    env_file:
      - ./hadoop.env 
      - ./.env      
    networks:
      - hadoop-net
    depends_on:
      - namenode
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  datanode2:
    <<: *datanode-template 
    hostname: datanode2
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data

  datanode3:
    <<: *datanode-template 
    hostname: datanode3
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
  
  postgres:
    image: postgres:13
    hostname: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - ./.env 
    networks:
      - hadoop-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    hostname: hive-metastore
    volumes:
      - warehouse:/opt/hive/data/warehouse 
    environment:
      - SERVICE_PRECONDITION=${HIVE_METASTORE_PRECONDITION:-namenode:9870 datanode1:9866 postgres:5432} 
    env_file:
      - ./.env 
    networks:
      - hadoop-net
    depends_on:
      - namenode
      - datanode1
      - postgres
    command: /opt/hive/bin/hive --service metastore
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    hostname: hive-server
    configs:
      - source: core-site-v1
        target: /opt/hive/conf/core-site.xml 
      - source: hdfs-site-v1
        target: /opt/hive/conf/hdfs-site.xml 
      - source: yarn-site-v1
        target: /opt/hive/conf/yarn-site.xml 
      - source: mapred-site-v1
        target: /opt/hive/conf/mapred-site.xml 
      - source: hive-site-v1
        target: /opt/hive/conf/hive-site.xml
    environment:
      - SERVICE_PRECONDITION=${HIVE_SERVER_PRECONDITION:-hive-metastore:9083 resourcemanager:8088} 
      - HADOOP_CONF_DIR=/opt/hive/conf 
      - YARN_CONF_DIR=/opt/hive/conf 
      - HADOOP_HEAPSIZE=2048
      - HIVE_SERVER2_HEAPSIZE=2048 
    env_file:
      - ./.env
    networks:
      - hadoop-net
    depends_on:
      - hive-metastore
      - resourcemanager 
    command: /opt/hive/bin/hive --service hiveserver2
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure


  resourcemanager:
    image: jayachander/hadoop-resourcemanager:1.0.0-hadoop3.3.2-java8
    hostname: resourcemanager
    environment:
      - SERVICE_PRECONDITION=${RESOURCEMANAGER_PRECONDITION:-namenode:9870 datanode1:9866} 
      - YARN_RESOURCEMANAGER_OPTS=-Ddebug.mode=true
      - HADOOP_HEAPSIZE=2048
      - YARN_HEAPSIZE_MAX=3072
      - YARN_RESOURCEMANAGER_HEAPSIZE=2048
    env_file:
      - ./hadoop.env 
      - ./.env     
    ports:
      - "8088:8088" # YARN ResourceManager UI
    networks:
      - hadoop-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - namenode
      - datanode1
      - datanode2
      - datanode3


  nodemanager1: &nodemanager-template
    image: thangdoc/hadoop-nodemanager-python:latest 
    hostname: nodemanager1
    environment:
      - SERVICE_PRECONDITION=${NODEMANAGER_PRECONDITION:-namenode:9870 resourcemanager:8088} 
      - HADOOP_HEAPSIZE=1024
      - YARN_HEAPSIZE_MAX=1536
      - YARN_NODEMANAGER_HEAPSIZE=1024
    env_file:
      - ./hadoop.env 
      - ./.env      
    networks:
      - hadoop-net
    depends_on:
      - resourcemanager
      - namenode
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  nodemanager2:
    <<: *nodemanager-template
    hostname: nodemanager2

  nodemanager3:
    <<: *nodemanager-template
    hostname: nodemanager3


  jupyter:
    image: jupyter/pyspark-notebook:spark-3.3.0
    hostname: jupyter
    ports:
      - "8888:8888" 
      - "4041:4041" 
    volumes:
      - ./notebooks:/mnt/notebooks   
    configs:
      - source: core-site-v1
        target: /usr/local/spark/conf/core-site.xml 
      - source: hdfs-site-v1
        target: /usr/local/spark/conf/hdfs-site.xml
      - source: yarn-site-v1
        target: /usr/local/spark/conf/yarn-site.xml
      - source: hive-site-v1
        target: /usr/local/spark/conf/hive-site.xml
      - source: spark-defaults-v1
        target: /usr/local/spark/conf/spark-defaults.conf
      - source: postgres_jars
        target: /usr/local/spark/jars/postgresql-42.3.1.jar
      - source: requirements
        target: /tmp/requirements.txt

    environment:
      - SPARK_MASTER=yarn
      - SPARK_SUBMIT_DEPLOYMODE=client
      - JUPYTER_ENABLE_LAB=yes
      - SPARK_DRIVER_HOST=jupyter 

      - HADOOP_CONF_DIR=/usr/local/spark/conf 
      - YARN_CONF_DIR=/usr/local/spark/conf
      - SPARK_OPTS="--master=yarn --deploy-mode=client --driver-java-options=-Dlog4j.logLevel=info"
      - SERVICE_PRECONDITION=hive-metastore:9083 resourcemanager:8088
    env_file:
      - ./.env        
      - ./hadoop.env  
    networks:
      - hadoop-net
    depends_on: 
      - resourcemanager
      - nodemanager
      - hive-metastore
    command: >
      bash -c "pip install -r /tmp/requirements.txt && \
      start-notebook.sh --NotebookApp.token='' --NotebookApp.password='' --NotebookApp.notebook_dir='/mnt/notebooks'"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 2G

  superset_db:
    image: postgres:13
    container_name: superset_db
    restart: always
    environment:
      POSTGRES_DB: superset
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    networks:
      - hadoop-net
    volumes:
      - superset_db_data:/var/lib/postgresql/data
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure

  superset:
    image: thangdoc/superset-bigdata:latest
    container_name: superset
    restart: always
    ports:
      - "8089:8088"
    depends_on:
      - superset_db
    networks:
      - hadoop-net
    env_file:
      - ./superset/.env
    environment:
      SUPERSET_CONFIG_PATH: /app/config/superset_config.py
      SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-no}"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"

      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY:-"YOUR_OWN_RANDOM_SECRET_KEY_CHANGE_ME"}

      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@superset.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      ADMIN_FIRSTNAME: ${ADMIN_FIRSTNAME:-Superset}
      ADMIN_LASTNAME: ${ADMIN_LASTNAME:-Admin}
    configs:
      - source: superset_entrypoint
        target: /app/docker/entrypoint.sh
        mode: 0755 
      - source: superset_config
        target: /app/config/superset_config.py

    volumes:
      - superset_home:/app/superset_home
    entrypoint: ["/app/docker/entrypoint.sh"] 
    command: ["/usr/bin/run-server.sh"]
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure


  historyserver:
    image: jayachander/hadoop-historyserver:1.0.0-hadoop3.3.2-java8
    container_name: historyserver
    hostname: historyserver
    networks:
      - hadoop-net
    environment:
      - YARN_CONF_yarn_log_aggregation_enable=true
      - YARN_CONF_yarn_nodemanager_remote___app___log___dir=hdfs://namenode:9000/app-logs
      - YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/
      - MAPRED_CONF_mapreduce_jobhistory_address=historyserver:10020
      - MAPRED_CONF_mapreduce_jobhistory_webapp_address=historyserver:8188
      - YARN_CONF_yarn_timeline___service_enabled=true
      - YARN_CONF_yarn_timeline___service_hostname=historyserver
      - YARN_CONF_yarn_timeline___service_address=historyserver:10200
      - YARN_CONF_yarn_timeline___service_webapp_address=historyserver:8188
      - YARN_CONF_yarn_timeline___service_generic___application___history_enabled=true
      - YARN_CONF_yarn_timeline___service_store___class=org.apache.hadoop.yarn.server.timeline.RollingLevelDBTimelineStore
      - YARN_CONF_yarn_timeline___service_leveldb___timeline___store_path=/hadoop/yarn/timeline
    ports:
      - "8188:8188"
    volumes:
      - historyserver_timeline:/hadoop/yarn/timeline
    depends_on:
      - namenode
      - resourcemanager
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure


# --- Volumes ---
volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:

  postgres_data:
  warehouse:

  superset_db_data:
  superset_home:

  historyserver_timeline: {}

# --- Networks ---
networks:
  hadoop-net:
    driver: overlay
    attachable: true
    # external: true  

configs: 
  core-site-v1:
    external: true 
  hdfs-site-v1:
    external: true
  yarn-site-v1:
    external: true
  hive-site-v1:
    external: true
  spark-defaults-v1:
    external: true
  requirements:
    external: true
  mapred-site-v1:
    external: true

  postgres_jars:
    external: true
  
  superset_entrypoint:
    external: true
  superset_config:
    external: true
